const disclosureHeaders = new Headers();
disclosureHeaders.append("Content-Type", "application/json");
disclosureHeaders.append("Authorization", "Basic YWRtaW46YWRtaW4=");
disclosureHeaders.append("Cookie", "cq-authoring-mode=TOUCH");

const disclosureQuery = {
    protocol: document.location.protocol,
    host: document.location.host,
    path: "graphql/execute.json/dot-pnc-aem-caas",
    name: "disclosure-by-id",
    paramName: "fragmentId",
    url: "",
    requestOptions: {
        method: 'GET',
        headers: disclosureHeaders,
        redirect: 'follow'
    }
};


/**
 * function createDisclosureArray
 * 
 * Creates an array of objects for all of the data-id attribute values that are present on the page.
 * 
 * @returns disclosureArray
 */
function createDisclosureArray(){   
    const disclosureElement = document.querySelectorAll('span[data-id]');
    const disclosureArray = [];
    for (let i = 0, max=disclosureElement.length; i < max; i++) {
        let fragmentId = disclosureElement[i].dataset.id;
        disclosureArray.push({
            fragmentId: fragmentId
        });
    }
    return { 
        disclosureArray: disclosureArray,
        disclosureElement: disclosureElement,
    }
}
/**
 * function generate Query URL
 * 
 * Sets a unique parameters for the URL.
 * 
 * @returns disclosureArray
 */
function setDisclosureURL(disclosureArray){   
    const uniqueArray = []
    const baseUrl = disclosureQuery.protocol +"//"+ disclosureQuery.host +"/"+ disclosureQuery.path +"/"+ disclosureQuery.name +"%3B"+ disclosureQuery.paramName +"%3D{\"_logOp\"%3A\"OR\"%2C\"_expressions\"%3A[";
    for (let i = 0, max=disclosureArray.length; i < max; i++) {
        let fragmentId = disclosureArray[i].fragmentId;
        if(!uniqueArray.find(o => o.fragmentId === fragmentId)) {
            uniqueArray.push({
                fragmentId: fragmentId
            });
        }
    }
    const queryValue = uniqueArray.map(({fragmentId}) => '{\"value\"%3A\"'+fragmentId+'\"}').join('%2C');
    disclosureQuery.url = baseUrl + queryValue + "]}";
}

/**
 * function hasNewDisclosure
 * 
 * Check if new disclosures were found.
 * @param existingDisclosures {Array} list of the previously found disclosure IDs
 * @param newDisclosures {Array} list of new disclosure IDs
 * 
 * @returns Boolean
 */
function hasNewDisclosure(existingDisclosures, newDisclosures){
    // comparing each element of array 
    for (let i = 0; i < newDisclosures.length; i++) {
        let fragmentId = newDisclosures[i].fragmentId;
        if (!existingDisclosures.find(o => o.fragmentId === fragmentId)) {
            return true;
        }
    }
    return false;
}

/**
 * function checkExists
 * 
 * Checks to see if the fragmentId is also present in the graphQl response.
 * 
 * @param {*} disclosureData 
 * @param {*} fragmentId 
 * @returns true or false
 */
function checkExists(disclosureData, fragmentId) {
    for (let i = 0, max = disclosureData.length; i < max; i++) {
        const matchedObject = disclosureData.find((obj) => obj.fragmentId === fragmentId);
        if (matchedObject) {
            return true;
        }
    }
    return false;
}

/**
 * function createFootnoteObject
 * 
 * Updates the footnote numbering based on if the fragmentId already exists.
 * 
 * @param {*} footnoteObject 
 * @param {*} fragmentId 
 * @param {*} footnoteNumber 
 * @returns footnoteNumber
 */
function createFootnoteObject(footnoteObject, fragmentId, footnoteNumber) {
    if (!footnoteObject.hasOwnProperty(fragmentId)) {
        footnoteObject[fragmentId] = footnoteNumber;
    } else {
        footnoteNumber--;
    }
    return footnoteNumber;
}

/**
 * function createAnchorTag
 * 
 * Creates an HTML anchor tag and sets the link to the correct disclosure in the footer and sets the superscript numbering.
 * 
 * @param {*} disclosureArray 
 * @param {*} i 
 * @returns anchorTag
 */
function createAnchorTag(disclosureArray, i) {
    const anchorTag = document.createElement('a');
    anchorTag.setAttribute('href', '#' + disclosureArray[i].anchorId);
    anchorTag.setAttribute('class', 'disclosureAnchor');
    anchorTag.textContent = '[' + disclosureArray[i].superScript + ']';
    anchorTag.setAttribute('aria-label','Important Legal Disclosures & Information '+disclosureArray[i].superScript)
    return anchorTag;
}

/**
 * function addSuperScript
 * 
 * Checks to see if the fragmentId exists. If so function will appeend the superscript and anchor tags to the disclosureElement
 * 
 * @param {*} disclosureData 
 * @param {*} disclosureArray 
 */
function addSuperScript(dataObject) {
    document.querySelectorAll('.disclosureSup').forEach(e => e.remove());
    let disclosureData = dataObject.orderedDisclosureData;
    let disclosureArray = dataObject.disclosureArrayObject.disclosureArray;
    let disclosureElement = dataObject.disclosureArrayObject.disclosureElement;

    const footnoteObject = {};
    let footnoteNumber = 1;
    for (let i = 0, max = disclosureArray.length; i < max; i++) {
        let fragmentId = disclosureElement[i].dataset.id;
        const exists = checkExists(disclosureData, fragmentId);
        if (exists) {
            footnoteNumber = createFootnoteObject(footnoteObject,fragmentId,footnoteNumber);
            disclosureArray[i].anchorId = fragmentId;
            disclosureArray[i].superScript = footnoteObject[fragmentId];
            const anchorTag = createAnchorTag(disclosureArray, i);
            const sup = document.createElement('sup');
            sup.classList.add("disclosureSup");
            const fragment = document.createDocumentFragment();
            fragment.appendChild(sup).appendChild(anchorTag);
            disclosureElement[i].append(fragment);
            footnoteNumber++;
        }
    }
}


/**
 * function getDisclsoures
 * 
 * Makes the call to graphQl using the dynamic url variable and rerquestsOptions object. Will return an error message if something goes wrong.
 * 
 * @returns result
 */
async function getDisclosures(){
    try{
        let result = await fetch(disclosureQuery.url, disclosureQuery.requestOptions);
        if (!result.ok) {
            const message = `An error has occured: ${result.status} - ${result.statusText}`;
            throw new Error(message);
        }
        return await result.json();
    } catch (error){
        console.log(error.message);
        document.getElementById('disclosureComponent').append('No disclosures were found.');
    }
}

/**
 * function getDisclosureData
 * 
 * Gets the graphQL resposne and stores it in disclosure. Returns the list of items found in the graphQL response in an arry of obejects.
 * 
 * @returns disclosure.data.disclosureList.items
 */
async function getDisclosureData() {
    const disclosure = await getDisclosures();
    return disclosure.data.disclosureList.items;
}

/**
 * function createListItem
 * 
 * Creates the ordered list in the footer and sets the text to the disclosure copy found in the graphQL response.
 * 
 * @param {*} disclosureData 
 * @param {*} i 
 * @returns listItem
 */
function createListItem(disclosureData, i) {
    const listItem = document.createElement('li');
    listItem.innerHTML = `${disclosureData[i].copy}`;
    listItem.setAttribute('id', disclosureData[i].fragmentId);
    return listItem;
}

/**
 * function orderedDisclosureData
 * 
 * Orders the data received from graphQL in the same order as the disclosureArray.
 * 
 * @param {*} disclosureData
 * @param {*} disclosureArray
 * @returns orderedDisclosureData
 */
function orderDisclosureData(disclosureData, disclosureArray) {
    const orderedDisclosureData = [];
    const hasFragmentId = new Set();
    for (let i = 0, max = disclosureArray.length; i < max; i++) {
        const fragmentId = disclosureArray[i].fragmentId;
        if (!hasFragmentId.has(fragmentId)) {
            const matchedObject = disclosureData.find((obj) => obj.fragmentId === fragmentId);
            if (matchedObject) {
                orderedDisclosureData.push(matchedObject);
            }
            hasFragmentId.add(fragmentId);
        }
    }
    return orderedDisclosureData;
}

/**
 * function updateLegalAccordion
 * 
 * Creates an ordered list in the accordion or the page and appends the list item with the copy from graphQL.
 * 
 * @returns disclosureData
 */
async function updateLegalAccordion() {
    document.querySelectorAll('.disclosureOL').forEach(e => e.remove());
    const disclosureArrayObject = createDisclosureArray();
    const disclosureData = [];
    const hasNew = (window.CQ?.disclosure.items) ? hasNewDisclosure(window.CQ.disclosure.items, disclosureArrayObject.disclosureArray) : true;
    if( hasNew ) {
        setDisclosureURL(disclosureArrayObject.disclosureArray);
        const disclosureNum = await getDisclosureData();
        for (let i = 0, max = disclosureNum.length; i < max; i++) {
            disclosureData.push({
            fragmentId: disclosureNum[i].fragmentId,
            copy: disclosureNum[i].copy.html,
            });
        }
        window.CQ.disclosure.items = disclosureData;
    }
    const orderedDisclosureData = orderDisclosureData(window.CQ.disclosure.items, disclosureArrayObject.disclosureArray);
    const orderedList = document.createElement('ol');
    orderedList.classList.add("disclosureOL");
    for (let i = 0, max = orderedDisclosureData.length; i < max; i++) {
        const listItem = createListItem(orderedDisclosureData, i);
        orderedList.appendChild(listItem);
    }
    document.getElementById('disclosureComponent').appendChild(orderedList);
    return {
        orderedDisclosureData: orderedDisclosureData,
        disclosureArrayObject: disclosureArrayObject
    }
}

/**
 * function handleAnchorDisclosureClick
 * 
 * Handles the click event of anchor tags with the 'anchorDisclosure' class.
 * Prevent the default behavior of the click event.
 * Checks to see if the expanded class is on the accordion, if it's not, the accordion button is clicked
 * Scrolls the accordion into view and sets focus
 * 
 * @param {Event} e - The click event object.
 */
function handleAnchorDisclosureClick(e) {
    e.preventDefault();
    e.stopPropagation();
    let btnLink = document.querySelector('.cmp-accordion__button');
    if (!btnLink.classList.contains('cmp-accordion__button--expanded')) {
        btnLink.click();
    }

    let el = document.querySelector('.cmp-accordion__button--inner');
    if (el) {
        el.scrollIntoView({ behavior: 'smooth' });
        setTimeout(function () {
            el.focus();
        }, 500);
    }
}
window.CQ = window.CQ || {};
window.CQ.disclosure = window.CQ.disclosure || {};
window.CQ.disclosure.build = function build() {
    updateLegalAccordion().then((disclosureData) => addSuperScript(disclosureData));
}

document.addEventListener("DOMContentLoaded", function(){
    if (!document.querySelector(".comparison")) {
        window.CQ.disclosure.build();
    }
});

document.addEventListener('click', function (e) {
    if (e.target && e.target.classList.contains('disclosureAnchor')) {
        handleAnchorDisclosureClick(e);
    }
});