const LOCATION_COOKIE = "pncloc";
const CACHE_COOKIE = "pncaffiliatecache";
const CACHE_DEFAULT_VALUE = "Standard";
const zipReg = /^\d{5}$/;

let datethirty = new Date();
datethirty.setTime(datethirty.getTime()+(30*24*60*60*1000));
let loader__page, loader__fetch;
let affiliates=["15"];
let swStates=["AZ","TX","WV","NM","CO","CA"];
let olbprexCheck;

/**
 * Document ready event to check the for the LOCATION_COOKIE as well as attaching the submit form event to the update rail
 * 
 */
document.onreadystatechange = function () {
  if (document.readyState == "complete") {
    checkCookie({},LOCATION_COOKIE);
    
    let updateForm = document.querySelector('#zip-update-form');
    if (updateForm) {
      if (updateForm.attachEvent) {
        updateForm.attachEvent("submit", processForm);
      } else {
        updateForm.addEventListener("submit", processForm);
      }       
    }    
  }
}

/**
 * Mutation Observer for attaching submit event to the zip forms, among other things
 * 
 */
const observer = new MutationObserver(function() {
  loader__page = document.querySelector('#content-loading__page');
  loader__fetch = document.querySelector('#content-loading__fetch');

  const form__content = document.querySelector('#zip-form__content');
  const form__gated = document.querySelector('#zip-form__gated');  
  const form__redirect = document.querySelector('#zip-form__redirect'); 

  if (form__content) {
    checkCookie({},LOCATION_COOKIE, form__content.id);
    if (form__content.attachEvent) {
      form__content.attachEvent("submit", processForm);
    } else {
      form__content.addEventListener("submit", processForm);
    }
    displayLoading("page");
    observer.disconnect();

  } else if (form__gated){
    checkCookie({},LOCATION_COOKIE, form__gated.id);
    if (form__gated.attachEvent) {
      form__gated.attachEvent("submit", processForm);
    } else {
      form__gated.addEventListener("submit", processForm);
    }
    displayLoading("page");
    observer.disconnect();
  }
  else if (form__redirect){
    checkCookie({},LOCATION_COOKIE, form__redirect.id);
    if (form__redirect.attachEvent) {
      form__redirect.attachEvent("submit", processForm);
    } else {
      form__redirect.addEventListener("submit", processForm);
    }
    displayLoading("page");
    observer.disconnect();
  }    
});  
// Set Observer configuration object:
const config = { childList: true };  
// Start the observer
observer.observe(document.body, config);

/**
 * Click Event for the Zip Overlay Submit button
 * @param {event} e - Form submission event.
 */
function processForm(e) {
  if (e.preventDefault) e.preventDefault();
  
  const FORM_DATA  = e.target;
  const DSA_URL =  '/bin/pnc-com/post/dsaservice';
  const ZIP_FIELD = FORM_DATA.querySelector('[name="zipCode"]');
  const SERVICE_FIELD = FORM_DATA.querySelector('[name="serviceName"]');

  let SERVICE_NAME = SERVICE_FIELD;
    if(SERVICE_NAME) SERVICE_NAME = SERVICE_FIELD.value;
  let ZIP_CODE = ZIP_FIELD;
    if(ZIP_CODE) ZIP_CODE = ZIP_FIELD.value ;

    if(SERVICE_NAME && ZIP_CODE) postData(DSA_URL, 'zipCode='+ZIP_CODE+'&serviceName='+SERVICE_NAME, FORM_DATA.id);

  return false;
}

/**
 * Submit the data to the supplied DSA Service.
 * @param {string} url - Constant variable of the AEM servers DSA API servlet.
 * @param {JSON} data - JSON Object containing the API parameters.
 * @param {string} id - The ID of the form object that was submitted.
 * @returns {string} A JSON Object containing the DSA API response.
 */
async function postData(url = '', data = { }, id = '') {
  const ZIP_FIELD = document.querySelector('#zipCode') ? document.querySelector('#zipCode'):"";
  const ERROR_FIELD = document.querySelector('[id="zip-code__error"]') ? document.querySelector('[id="zip-code__error"]'):"";
  const UPDATE_ZIP_FIELD = document.querySelector('input[id="zipCodeUpdate"]') ? document.querySelector('input[id="zipCodeUpdate"]'):"";
  const UPDATE_ERROR_FIELD = document.querySelector('[id="zip-code__error--update-rail"]') ? document.querySelector('[id="zip-code__error--update-rail"]'):"";
  
  if(ERROR_FIELD!=""){ ERROR_FIELD.classList.remove("display");}
  if(ZIP_FIELD!=""){ ZIP_FIELD.classList.remove("invalid");}
  if(UPDATE_ERROR_FIELD!=""){ UPDATE_ERROR_FIELD.classList.remove("display");}
  if(UPDATE_ZIP_FIELD!=""){ UPDATE_ZIP_FIELD.classList.remove("invalid");}

  let theZip = data.slice(8,13);

  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
      'X-Requested-With': 'XMLHttpRequest',
    },
    body: data,
  })
    .then((response) => response.json())
    .then((data) => {
      if("appStatusCode" in data && (data.appStatusCode == '999' ||
      data.appStatusCode == '1002' || data.appStatusCode == '1004' ||
      data.appStatusCode == '2001' || data.appStatusCode == '2002' ||
      data.appStatusCode == '2004')) {
        if(id!="zip-update-form"){
            ERROR_FIELD.innerText = data.message;
            ERROR_FIELD.classList.add("display");
            ZIP_FIELD.classList.add("invalid");
            ZIP_FIELD.focus();                   
        }else{
            UPDATE_ERROR_FIELD.innerText = data.message;
            UPDATE_ERROR_FIELD.classList.add("display");
            UPDATE_ZIP_FIELD.classList.add("invalid");
            UPDATE_ZIP_FIELD.focus();  
        }

      }else{
        displayLoading("fetch");        
        checkCookie(data, LOCATION_COOKIE, id);
      }          
      //DTM Call for success
      event_data.zip = theZip;
      _satellite.track("zip input");
    })
    .catch((error) => {
      ERROR_FIELD.innerText = "Invalid Request.";
      ERROR_FIELD.classList.add("display");
      ZIP_FIELD.classList.add("invalid");
      ZIP_FIELD.focus();           
      //DTM Call for error
      event_data.status = data.appStatusCode;
      event_data.zip = theZip;
      _satellite.track("zip input");
    });
  return response;
} 

/**
 * Create a secure cookie based on the supplied response data and supplied key objects
 * @param {JSON} data - JSON Object containing the API parameters.
 * @param {string} c - Name of the cookie to check.
 * @param {string} id - ID of the form object. Used to determine how to treat the modal
 */
async function checkCookie(data = { }, c='', id='') {    
  const dataLength =  Object.keys(data).length;
  const THE_COOKIE = getCookieValue(c);
  let keys = "";
  let cp = true;
  olbprexCheck = getCookieValue("olbprex").length>0 ? true : false;
  if(olbprexCheck){
    getCookieValue("olbprex").indexOf("pr1=n")>-1 ? cp = true : cp = false;
  }
  
  if(dataLength > 0) keys = "a="+data.affiliate+"|an="+data.affiliateName+"|c="+data.county+"|dpr="+data.dpr+"|dprn="+data.dprName+"|s="+data.state+"|z="+data.zipcode; 
  
  /* This block is used for scenarios where the cookie does NOT exist */
  if(!THE_COOKIE){
    //there is no cookie, so the user needs to submit the form, so hide "loading page experience" and show the form
    let experienceLoading = document.querySelector('#zip-overlay__page-load');
    let fetchForm = document.querySelector('#zip-overlay__fetch-form');

    experienceLoading.classList.add("visually-hidden");
    fetchForm.classList.add("display");
  }
  if(!THE_COOKIE && dataLength >0){    
    //The cookie does not exist, and there is data in the object, so create it
    document.cookie = c+"="+keys+";expires="+datethirty+";path=/; SameSite=Strict; Secure";
    //Create a cache key cookie for Akamai to watch

    if(affiliates.includes(data.affiliate)){
      setCacheCookie(data.affiliateName, '', cp);
    } else if (swStates.includes(data.state)){
      setCacheCookie(CACHE_DEFAULT_VALUE, data.state, cp);
    }else{
      setCacheCookie(CACHE_DEFAULT_VALUE, '', cp);
    }

    //Don't reload the page if this is a GATED overlay
    switch(id){
      case "zip-form__gated":
        setTimeout(() => {
          hideLoading();         
        }, 1500)
        break;
      case "zip-form__content":
        setTimeout(() => {          
          hideLoading();
          location.reload();                  
        }, 1500)
        break;
        case "zip-form__redirect":
          setTimeout(() => {
            if(!zipRedirect){
              dismissModal();
            }
            location.reload();            
          }, 1500)
          break;
    }    
  }
  
  /* This block is used for scenarios where the cookie does exist */
  if (THE_COOKIE && dataLength > 0) {
    //if the cookie exists and there is data (return visitor)
    //Scenario: this would occur during an update rail call
    let pnclocValue = getCookieValue(LOCATION_COOKIE);
  
    if(pnclocValue != keys){
      //if the cookie values are not equal, we need to update the value with the new data
      document.cookie = c+"="+keys+";expires="+datethirty+"; path=/;SameSite=Strict; Secure";
      if(affiliates.includes(data.affiliate)){
        setCacheCookie(data.affiliateName, '', cp);
      } else if (swStates.includes(data.state)){
      	setCacheCookie(CACHE_DEFAULT_VALUE, data.state, cp);
      } else{
        setCacheCookie(CACHE_DEFAULT_VALUE, '', cp);
      }
      setTimeout(() => {
        dismissModal(); //let it "think" for a second
      }, 1000)
    }
    //we have to reload the page in order for the dynamic XF to render correctly
    location.reload();
  } else if(THE_COOKIE){  
    //the cookie straight up exists on page load (return visitor)  
    //Don't reload the page if this is a GATED overlay
    const pnclocValue = getCookieValue(LOCATION_COOKIE);
    const updateForm = document.querySelector('#zip-update-form');

    if(updateForm && pnclocValue){
      const z = pnclocValue.split("z=")[1];
      const s = pnclocValue.split("s=")[1].slice(0, 2);
      const a = pnclocValue.split("a=")[1].slice(0, 2);
      const an = pnclocValue.split("an=")[1].slice(0, 2);
      updateForm.querySelector('[id="zipCodeUpdate"]').value = z;
      if (olbprexCheck){
        if (swStates.includes(s)){
          setCacheCookie(CACHE_DEFAULT_VALUE, s, cp);
        } else{
          if(affiliates.includes(a)){
            setCacheCookie(a, "", cp);
          }else{
            setCacheCookie(CACHE_DEFAULT_VALUE, "", cp);
          }
          
        }
        
      }
    }

    switch(id){
      case "zip-form__gated":      
        setTimeout(() => {
          //Reach out to DSA to get the products to see if the page_data code exists in the response 
          if(SERVICE_NAME && ZIP_CODE) postData(DSA_URL, 'zipCode='+data.zip+'&serviceName='+SERVICE_NAME, id);      
        }, 1000)
        break;
      case "zip-form__content":
        setTimeout(() => {
          dismissModal();                     
        }, 1000)
        break;
      case "zip-form__redirect":
        setTimeout(() => {
          if(!zipRedirect){
            dismissModal();
          }           
        }, 1000)
        break;
    }
	  document.getElementById('main-content').focus();
    return false;    
  }  
  
}

/**
 * Void function that just dismisses the modal if it is in view
 */
 async function dismissModal() {    
   if(document.body.classList.contains("tingle-enabled")){
    document.getElementById("pncDialog").parentElement.style.display = "none";
    document.getElementById("pncDialog").parentElement.classList.remove('disabled-dismissal');
    window.allowModalClose = true;
    document.body.classList.remove('tingle-enabled');
    var heading = document.getElementsByTagName("h1");
    heading[0].focus();
   }
 }

 /**
 * Void function that just shows the loading animation
 */
  async function displayLoading(l) {   
    switch(l){
      case "page":
        loader__page.classList.add("display");
		loader__page.focus();
          setTimeout(() => {
            loader__page.classList.remove("display");
          }, 10000)
        break;

      case "fetch":
        loader__fetch.classList.add("display");
        loader__fetch.focus();
          setTimeout(() => {
            loader__fetch.classList.remove("display");
          }, 10000)
        break;

    }
    
    
  }

/**
 * Void function that just hides the loading animation
 */
    async function hideLoading(l) {    

      switch(l){
        case "page":
          loader__page.classList.add("display");
            setTimeout(() => {
              loader__page.classList.remove("display");
            }, 10000)
          break;
  
        case "fetch":
          loader__fetch.classList.add("display");
            setTimeout(() => {
              loader__fetch.classList.remove("display");
            }, 10000)
          break;

      }
    }

/**
 * Validate that a zip code meets the REGEX
 * @param {string} zip - Zip code value to check.
 * @returns {boolean} Whether or not the zip code meets the requirements.
 */
    function validateZip(zip){
      if(zip==""){
        return false;
      } else if(!zipReg.test(zip)){
        return false;
      } else{
        return true;
      }
    } 

/**
 * Get the value of the supplied cookie name
 * @param {string} name - Name of the cookie to check.
 * @returns {string} The full value of the supplied cookie name.
 */
    const getCookieValue = (name) => (
      document.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]+)')?.pop() || ''
    )

/**
/**
 * Create a cookie that Akamai will use as a Cache Key
 * @param {String} a - The Name of the Affiliate region, if it has been added to the list; Otherwise value is 'Standard'
 * @param {String} s - The State associated with the returned region
 */
  function setCacheCookie(a,s="", cp){
    if(s!=""){
      if (cp){
        document.cookie = CACHE_COOKIE+"="+a+"-"+s+" cp;expires="+datethirty+";path=/; SameSite=Strict; Secure";
      }else{
        document.cookie = CACHE_COOKIE+"="+a+"-"+s+" cc;expires="+datethirty+";path=/; SameSite=Strict; Secure";
      }
		  
    } else {
      if (cp){
        document.cookie = CACHE_COOKIE+"="+a+" cp;expires="+datethirty+";path=/; SameSite=Strict; Secure";
      } else{
        document.cookie = CACHE_COOKIE+"="+a+" cc;expires="+datethirty+";path=/; SameSite=Strict; Secure";
      }
		  
    }
}

  